initSidebarItems({"enum":[["LoadError","An error that may occur when loading data from persistent storage."],["LoadWriteError","An error that may occur when storing or loading data from persistent storage."],["NoError","An error that cannot happen, i.e., this type is not inhabited and is used as an error type of an operation that cannot fail."],["PersistentState","The persistent contract state. Clone on this structure is designed to be cheap, and it is a shallow copy."],["WriteError","An error that may occur when writing data to persistent storage."]],"struct":[["AttemptToModifyLockedArea","An error used to indicate that an operation could not be completed because the portion of the trie is locked."],["EmptyCollector","Collector that does not collect anything. Mainly for testing."],["EntryId","An identifier of an entry stored in the mutable trie."],["Hash","A SHA256 hash."],["Hashed","Data together with a cached hash."],["Loader","Generic wrapper for a loader. This implements loadable for any S that can be seen as a byte array. Since this type is often used with a `S = &[u8]` we make it [Copy] to be able to share the backing buffer."],["MutableState","The mutable contract state. In contrast to [`PersistentState`] this state is designed for efficient modifications and rollbacks during transaction execution."],["MutableStateInner","This type is a technical device to support lazy conversion of [`PersistentState`] to [`MutableState`]. It contains the runtime representation of the tree that supports efficient updates. [`Clone`] on this structure is designed to be cheap, and it is a shallow copy. Modifications of the inner [`MutableTrie`] on either the clone or the original propagate to the other."],["MutableTrie","A mutable trie that exists during execution of a smart contract. Generally the [`MutableTrie`] is derived from a [`Node`], i.e., a persistent trie. After that, during execution, some parts are modified. When that happens the relevant part of the trie are copied so that the original persistent trie remains unmodified. In contrast to the [`Node`], all modifications on values purely owned by the [`MutableTrie`] are in-place, i.e., this structure is not persistent."],["Node","A persistent node. Cloning this is relatively cheap, it only copies pointers and increments reference counts."],["PersistentStateIterator","Iterator over all (key, value) pairs stored in the persistent state. Values are returned in increasing order of keys."],["Reference","Reference to a storage location where an item may be retrieved."],["SizeCollector","A [`Collector`] that keeps track of how much additional data will be required to store the tree."],["Storer","A generic wrapper that implements [BackingStoreStore] for any inner type that implements [Seek] and [Write], such as `Cursor<Vec<u8>>`."],["TooManyIterators","An error used to indicate when too many iterators were acquired at the same location in the tree. The maximum number is [u32::MAX]."]],"trait":[["AllocCounter","A trait that supports counting new memory allocations in the tree."],["BackingStoreLoad","Trait implemented by types that can load data from given locations. Dual to [`BackingStoreStore`]."],["BackingStoreStore","Trait implemented by types that can be used to store binary data, and return a handle for loading data. Dual to [`BackingStoreLoad`]."],["Collector","A type that can be used to collect auxiliary information while a mutable trie is being frozen. Particular use-cases of this are collecting the size of new data, as well as new persistent nodes."],["Loadable","A trait implemented by types that can be loaded from a [BackingStoreLoad] storage."],["ToSHA256","Compute SHA256 of data given the context. The context is sometimes needed since data is not available in memory and must be first loaded from, e.g., external storage"]],"type":[["LoadCallback","A loader implemented by an external function. This is the dual to [`StoreCallback`]"],["LoadResult","Result of loading data from persistent storage."],["LoadStoreResult","Result of loading or storing data from or to persistent storage."],["StateTrie","A lock guard derived from [`MutableStateInner`]. Only one can exist at the time."],["StoreCallback","A storer implemented by an external function. The function is passed a pointer to data to store, and the size of data. It should return the location where the data can be loaded via a [`LoadCallback`]."],["StoreResult","Result of storing data in persistent storage."],["Value","Value stored in the trie."]]});