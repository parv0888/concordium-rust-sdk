initSidebarItems({"enum":[["Action","Actions produced by running a receive function."],["InitResult","Result of initialization of a `v0` contract."],["ReceiveResult","Result of executing an entrypoint of a `v1` contract instance."]],"fn":[["invoke_init","Invokes an init-function from a given artifact."],["invoke_init_from_artifact","Invokes an init-function from a given artifact bytes"],["invoke_init_from_source","Invokes an init-function from Wasm module bytes"],["invoke_init_with_metering_from_source","Same as `invoke_init_from_source`, except that the module has cost accounting instructions inserted before the init function is called."],["invoke_receive","Invokes a receive-function from a given artifact"],["invoke_receive_from_artifact","Invokes a receive-function from a given artifact bytes"],["invoke_receive_from_source","Invokes a receive-function from Wasm module bytes"],["invoke_receive_with_metering_from_source","Invokes a receive-function from Wasm module bytes, injects the module with metering."]],"struct":[["ConcordiumAllowedImports","A structure that implements `ValidateImportExport` and thus specifies which host functions are allowed for `v0` contracts, and what their types should be."],["InitContext","Chain context accessible to the init methods."],["InitInvocation","Collection of information relevant to invoke an init-function."],["Logs","Structure to support logging of events from smart contracts. This is a list of items emitted by the contract, in the order they were emitted."],["ProcessedImports","Imports allowed for `v0` contracts processed into a format that is faster to use during execution. Instead of keeping names of imports they are processed into an enum with integer tags."],["ReceiveContext","Chain context accessible to the receive methods."],["ReceiveInvocation","Collection of information relevant to invoke a receive-function."],["SendAction","Data that accompanies the send action."],["SimpleTransferAction","Data that accompanies the simple transfer action, i.e., a transfer of CCD tokens from a contract instance to an account."],["State","V0 smart contract state. This is just a flat byte array and the contract can write to it arbitrarily via offsets from the start."]],"trait":[["HasChainMetadata","A trait implemented by types that give access to information about the chain available to smart contracts."],["HasInitContext","Types which can act as init contexts."],["HasReceiveContext","Types which can act as receive contexts."]]});