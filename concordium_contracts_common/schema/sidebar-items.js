initSidebarItems({"enum":[["Fields","Schema for the fields of a struct or some enum variant."],["FunctionV1","Describes the schema of an init or a receive function for V1 contracts with V1 schemas."],["SizeLength","Type of the variable used to encode the length of Sets, List, Maps"],["Type","Schema type used to describe the different types in a smart contract, their serialization and how to represent the types in JSON."],["VersionedModuleSchema","Represents the different schema versions."]],"fn":[["deserial_length","Deserialize a length of provided size."],["serial_length","Try to convert the `len` to the provided size and serialize it."]],"struct":[["ContractV0","Describes all the schemas of a V0 smart contract. The [`Default`] instance produces an empty schema."],["ContractV1","Describes all the schemas of a V1 smart contract. The [`Default`] instance produces an empty schema."],["ContractV2","Describes all the schemas of a V1 smart contract with a V2 schema. The [`Default`] instance produces an empty schema."],["ContractV3","Describes all the schemas of a V1 smart contract with a V3 schema. The [`Default`] instance produces an empty schema."],["FunctionV2","Describes the schema of an init or a receive function for V1 contracts with V3 schemas. Differs from [`FunctionV1`] in that a schema for the error can be included."],["ModuleV0","Contains all the contract schemas for a smart contract module V0."],["ModuleV1","Contains all the contract schemas for a smart contract module V1."],["ModuleV2","Contains all the contract schemas for a smart contract module V1 with a V2 schema."],["ModuleV3","Contains all the contract schemas for a smart contract module V1 with a V3 schema."]],"trait":[["SchemaType","The `SchemaType` trait provides means to generate a schema for structures. Schemas are used to make structures human readable and to avoid dealing directly with bytes, such as the contract state or parameters for contract interaction."]]});