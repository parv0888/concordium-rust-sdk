initSidebarItems({"enum":[["LoadError","An error that may occur when loading data from persistent storage."],["LoadWriteError","An error that may occur when storing or loading data from persistent storage."],["NoError","An error that cannot happen, i.e., this type is not inhabited and is used as an error type of an operation that cannot fail."],["PersistentState","The persistent contract state. Clone on this structure is designed to be cheap, and it is a shallow copy."],["WriteError","An error that may occur when writing data to persistent storage."]],"struct":[["AttemptToModifyLockedArea","An error used to indicate that an operation could not be completed because the portion of the trie is locked"],["EmptyCollector","Collector that does not collect anything. Mainly for testing."],["EmptyCounter","A counter that does not count anything, and always returns `Ok(())`."],["EntryId","An identifier of an entry stored in the mutable trie."],["Hash","A SHA256 hash."],["Hashed","Data together with a cached hash."],["Iterator",""],["Loader","Generic wrapper for a loader. This implements loadable for any S that can be seen as a byte array. Since this type is often used with a `S = &[u8]` we make it [Copy] to be able to share the backing buffer."],["MutableState","The mutable contract state."],["MutableStateInner","This type is a technical device to support lazy conversion of [`PersistentState`] to [`MutableState`]. It contains the runtime representation of the tree that supports efficient updates. [`Clone`] on this structure is designed to be cheap, and it is a shallow copy. Modifications of the inner [`MutableTrie`] on either the clone or the original propagate to the other."],["PersistentStateIterator","Iterator over all (key, value) pairs stored in the persistent state. Values are returned in increasing order of keys."],["Reference","Reference to a storage location where an item may be retrieved."],["SizeCollector","A collector that keeps track of how much additional data will be required to store the tree."],["Storer","A generic wrapper that implements [BackingStoreStore] for any inner type that implements [Seek] and [Write]."],["TooManyIterators","An error used to indicate when too many iterators were acquired at the same location in the tree. The maximum number is [u32::MAX]."]],"trait":[["AllocCounter","A trait that supports counting new memory allocations in the tree."],["BackingStoreLoad","Trait implemented by types that can load data from given locations."],["BackingStoreStore","Trait implemented by types that can be used to store binary data, and return a handle for loading data."],["Collector","A type that can be used to collect auxiliary information while a mutable trie is being frozen. Particular use-cases of this are collecting the size of new data, as well as new persistent nodes."],["Loadable","A trait implemented by types that can be loaded from a [BackingStoreLoad] storage."],["ToSHA256","Compute SHA256 of data given the context. The context is sometimes needed since data is not available in memory and must be first loaded from, e.g., external storage"],["TraversalCounter","A trait that supports keeping track of resources during tree traversal, to make sure that resource bounds are not exceeded."]],"type":[["LoadResult","Result of loading data from persistent storage."],["LoadStoreResult","Result of loading or storing data from or to persistent storage."],["StateTrie","A lock guard derived from [MutableStateInner]. Only one can exist at the time."],["StoreResult","Result of storing data in persistent storage."],["Value",""]]});