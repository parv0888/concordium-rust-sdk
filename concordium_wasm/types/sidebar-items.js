initSidebarItems({"enum":[["BlockType","We only support the empty block type and a single value type. Type indices are not supported in the MVP version of Wasm."],["ExportDescription","An exported item description. Since it is inconsequential whether extra definitions are exported we allow all of them to be flexible with respect to the external tooling."],["GlobalInit","The initial global value with its type. Because we do not allow imported globals, the initialization expression must consist of a single constant value of the right type, which we short-circuit into the single constant."],["ImportDescription","A single import description."],["OpCode","See Wasm spec for details of the meaning of the instructions."],["ValueType","Supported Wasm value types (i.e., no floats). We use a very low-level encoding which we make use of to remove some needless allocations. In particular the tags must be as specified by the Wasm specification and must match the binary serialization."]],"struct":[["Code","The body of a function."],["CodeSection","The code section, which contains the code of functions declared in the module."],["CustomSection","A processed custom section. By specification all custom sections have a name, followed by uninterpreted bytes."],["Data","The initialization of memory. The memory index is implicitly 0."],["DataSection","The data section, this is used to initialize linear memory upon start of execution."],["Element","An element description, describing how to initialize the table. The table index 0 is implicit, so we don’t record it in the struct."],["ElementSection","The element section, which is used to initialize the function table."],["Export","An exported item."],["ExportSection","The export section, which lists exported functions, globals, etc."],["Expression","An expression is a sequence of instructions followed by the “end” delimiter, which is also present in the binary format (see 5.4.6)."],["FunctionSection","The function section. This contains types of declared functions."],["FunctionType","A function type with at most one return value. The MVP version of Wasm does not support multiple return values, and thus we don’t either."],["Global","A single Global declaration, with initial value."],["GlobalSection","The list of globals declared in the module."],["Import","Import of an item from another module."],["ImportSection","The import section. This lists imports in the module."],["Limits",""],["Local","A local variable declaration in a function."],["MemArg","The immediate memory argument. Since all operations are on memory index 0 the index is implicit."],["MemorySection","The memory section, which contains declarations of linear memories. The Wasm version we support only supports at most one memory section."],["MemoryType",""],["Module","A parsed Wasm module. This no longer has custom sections since they are not needed for further processing."],["Name","A webassembly Name. We choose to have it be an owned value rather than a reference into the original module. Names are also used in the parsed AST, and we don’t want to retain references to the original bytes just because of a few names."],["StartSection","We do not support start sections, so this type has exactly one value, the empty start section, which is of course also the value returned by the Default instance."],["TableSection","The table section. The table is a list of functions and is used to support indirect function calls."],["TableType",""],["TypeSection","The type section, which contains type definitions."]],"type":[["FuncIndex",""],["GlobalIndex",""],["InstrSeq","A sequence of instructions."],["LabelIndex",""],["LocalIndex",""],["MemIndex",""],["StackHeight","A number of operands on the stack."],["StackSize",""],["TableIndex",""],["TypeIndex","Indices"]]});