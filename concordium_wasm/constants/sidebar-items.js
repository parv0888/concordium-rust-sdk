initSidebarItems({"constant":[["ALLOWED_LOCALS","The number of allowed locals in a function. This includes parameters and declared locals."],["MAGIC_HASH","The Wasm binary format magic hash."],["MAX_ALLOWED_STACK_HEIGHT","Maximum allowed stack + locals height."],["MAX_INIT_MEMORY_SIZE","Maximum number of pages for the initial memory size. Corresponds to 2MB. This constant must be such that MAX_INIT_MEMORY_SIZE * PAGE_SIZE does not overflow a u32;"],["MAX_INIT_TABLE_SIZE","The maximum allowed initial table size. In the version of Wasm we support there is no way to grow tables, so the initial size is the size of the table. Due to restrictions on module size, it is infeasible to have more than 1000 Functions in the table."],["MAX_NAME_SIZE","Maximum size of names. NB: Function names are restricted further. See concordium-contracts-common::constants::MAX_FUNC_NAME_SIZE"],["MAX_NUM_EXPORTS","Maximum number of exports from a module."],["MAX_NUM_GLOBALS","Maximum number of globals allowed in a module. This allows us to use a u16 for indexing and is relied upon by the interpreter."],["MAX_NUM_PAGES","Maximum number of pages allowed by our contracts."],["MAX_PREALLOCATED_BYTES","Maximum number of bytes we will preallocate when parsing vector-like things. Preallocation is more efficient than starting from 0, but we need to be careful not to explode by maliciously crafted input."],["MAX_SWITCH_SIZE","Maximum number of branches in the switch statement without the default branch. This needs to fit into a u16."],["PAGE_SIZE","Size of a Wasm page in bytes. This constant must be such that MAX_INIT_MEMORY_SIZE * PAGE_SIZE does not overflow a u32;"],["VERSION","The supported Wasm version."]]});