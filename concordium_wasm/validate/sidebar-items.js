initSidebarItems({"enum":[["ValidationError",""]],"fn":[["validate","Validate a single function. In order that this function is as flexible as possible it takes as input just an iterator over opcodes. The function will terminate at the first opcode it fails to read. Validation will ensure that the iterator is fully consumed and properly terminated by an `End` opcode. The return value is the outcome determined by the handler, as well as the maximum reachable stack height in this function."],["validate_module","Validate the module. This function parses and validates the module at the same time, failing at the first encountered error."]],"struct":[["ValidationState","The validation state contains the control frames and a stack of operands. this is the same state as described by the validation algorithm of the wasm specification appendix."]],"trait":[["Handler","Trait to handle the results of validation. The type parameter should be instantiated with an opcode. The reason it is a type parameter is to support both opcodes and references to opcodes as parameters. The latter is useful because opcodes are not copyable."],["HasValidationContext","The trait used used to parametrize the validation algorithm so that it can be used for other applications than mere validation. In particular the validation algorithm maintains useful state during its run, e.g., current and maximum stack height, which is useful during compilation."],["ValidateImportExport","Validate an import according to the specific logic of the host."]],"type":[["ValidateResult","Result type of validation."]]});