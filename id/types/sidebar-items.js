initSidebarItems({"constant":[["ACCOUNT_ADDRESS_SIZE","Size of an account address when serialized in binary. NB: This is different from the Base58 representation."],["ATTRIBUTE_NAMES","NB: The length of this list must be less than 256. This must be consistent with the value of attributeNames in haskell-src/Concordium/ID/Types.hs"],["ATTRIBUTE_TAG_LEI","Attribute tag for the LEI attribute."],["CHUNK_SIZE","Chunk size for encryption of prf key"],["NUM_BULLETPROOF_GENERATORS","This is currently the number required, since the only place these are used is for encrypted amounts."]],"enum":[["AccountCredential","A type encapsulating both types of credentials. Serialization must match the one in Haskell."],["AccountCredentialValues","A type encapsulating both types of credential values, analogous to AccountCredential. Serialization must match the one in Haskell."],["AccountCredentialWithoutProofs","Account credential with values and commitments, but without proofs. Serialization must match the serializaiton of `AccountCredential` in Haskell."],["CredentialType","Enumeration of the types of credentials."],["ImpossibleError","The empty type, here used as an impossible error in the implemention of `HasAttributeRandomness` for `SystemAttributeRandomness`."],["SchemeId","Which signature scheme is being used. Currently only one is supported."],["VerifyKey","Public AKA verification key for a given scheme. Only ed25519 is currently supported."]],"fn":[["account_address_from_registration_id","Construct account address from the registration id."],["mk_dummy_description","Make a dummy description with a given name."]],"static":[["PI_DIGITS","NB: This includes digits of PI (starting with 314…) as ASCII characters this could be what is desired, but it is important to be aware of it."]],"struct":[["AccCredentialInfo","Private and public data chosen by the credential holder before the interaction with the identity provider. The credential holder chooses a prf key and an attribute list."],["AccountAddress","Address of an account, as raw bytes."],["AccountCredentialMessage","Account credential message is an account credential together with a message expiry. This is the payload that is sent to the chain when new accounts are created, either initial accounts or normal accounts."],["AccountKeys","All account keys indexed by credentials."],["AccountOwnershipProof","A list of pairs of index of key and Ed25519 signatures on the challenge of the proofs of the credential The list should be non-empty and at most 255 elements long, and have no duplicates. The current choice of data structure disallows duplicates by design."],["AccountOwnershipSignature","Signature produced by the account holder when deploying a credential that ensures that they are the owner of the account keys that are part of the credential."],["AnonymityRevocationRecord","Data that needs to be stored by the identity provider to support anonymity revocation."],["ArData","Private and public data on an anonymity revoker. This is used purely off-chain."],["ArIdentity","Identity of the anonymity revoker on the chain. This defines their evaluation point for secret sharing, and thus it cannot be 0."],["ArInfo","Information on a single anonymity revoker held by the IP. Typically an IP will hold a more than one."],["ArInfos","Collection of anonymity revokers."],["AttributeList","An attribute list that is part of a normal credential. It consists of some mandatory attributes and some user selected attributes."],["AttributeStringTag","Attribute tags have two representations. The “internal” one which is a u8 element, and an external, human-readable one, which is a string. There is a defined mapping between them defined by the [ATTRIBUTE_NAMES] array (indices are internal tags, values at those indices are string tags)."],["AttributeTag","Attribute tags have two representations. The “internal” one which is a u8 element, and an external, human-readable one, which is a string. There is a defined mapping between them defined by the [ATTRIBUTE_NAMES] array (indices are internal tags, values at those indices are string tags). The JSON instances for this type are via the [AttributeStringTag] type defined below."],["ChainArData","Data relating to a single anonymity revoker sent by the account holder to the chain. Typically a vector of these will be sent to the chain."],["ChainArDecryptedData","Data structure for when a anonymity revoker decrypts its encrypted share This is the decrypted counterpart of ChainArData. This structure contains an explicit ArIdentity in contrast to the `ChainArData`. The reason for that is the use-case for this structure is that an individual anonymity revoker decrypts its share and sends it, and we need the context for that. In the other cases the data is always in the context of a credential or pre-identity object, and as a result part of the map."],["ChoiceArParameters","Choice of anonymity revocation parameters"],["CommitmentsRandomness","Randomness that is generated to commit to attributes when creating a credential. This randomness is needed later on if the user wishes to do something with those commitments, for example reveal the commited value, or prove a property of the value."],["CommonPioFields",""],["CommonPioProofFields","Common proof for both identity creation flows that the data sent to the identity provider is well-formed."],["CredDeploymentProofs","Proofs that the credential is well-formed."],["CredentialData","Credential data needed by the account holder to generate proofs to deploy the credential object. This contains all the keys on the credential at the moment of its deployment. If this creates the account then the account starts with exactly these keys."],["CredentialDeploymentCommitments","The commitments sent by the account holder to the chain in order to deploy credentials"],["CredentialDeploymentInfo","A credential with attributes, public keys, and proofs that it is well-formed."],["CredentialDeploymentValues","Values (as opposed to proofs) in credential deployment."],["CredentialHolderInfo","Private credential holder information. A user maintaints these through many different interactions with the identity provider and the chain."],["CredentialPublicKeys","Public credential keys currently on the account, together with the threshold needed for a valid signature on a transaction."],["Description","Description either of an anonymity revoker or identity provider. Metadata that should be visible on the chain."],["GlobalContext","A set of cryptographic parameters that are particular to the chain and shared by everybody that interacts with the chain."],["IdCredentials","In our case C: will be G1 and T will be G1 for now A secret credential is a scalar raising a generator to this scalar gives a public credentials. If two groups have the same scalar field we can have two different public credentials from the same secret credentials."],["IdObjectUseData","Data needed to use the retrieved identity object to generate credentials."],["IdOwnershipProofs","This structure contains all proofs, which are required to prove ownership of an identity, in a credential deployment."],["IdRecoveryRequest","A request for recovering an identity"],["IdentityObject","The data we get back from the identity provider in the version 0 flow."],["IdentityObjectV1","The data we get back from the identity provider in the version 1 flow."],["InitialAccountData","This contains all the keys on the account of the initial credential deployment."],["InitialCredentialDeploymentInfo","Information needed to create an `initial` account. This account is created on behalf of the user by the identity provider."],["InitialCredentialDeploymentValues","Values in initial credential deployment."],["IpAnonymityRevokers","Anonymity revokers associated with a single identity provider"],["IpArData","The data relating to a single anonymity revoker sent by the account holder to the identity provider. Typically the account holder will send a vector of these."],["IpArDecryptedData","Data structure for when a anonymity revoker decrypts its encrypted share This is the decrypted counterpart of IpArData."],["IpCdiSignature","Signature by the identity provider on the initial account creation. This is an ordinary ed25519 signature for performance reasons, and not the complex BLS signature that the identity provider signs normal credentials with."],["IpContext","Context needed to generate pre-identity object as well as to check it. This context is derived from the public information of the identity provider, as well as some other global parameters which can be found in the struct ‘GlobalContext’."],["IpData","Private and public data on an identity provider. This is used purely off-chain."],["IpIdentity","A succinct identifier of an identity provider on the chain. In credential deployments, and other interactions with the chain this is used to identify which identity provider is meant."],["IpInfo","Public information about an identity provider."],["IpInfos","Collection of identity providers."],["IpMetadata","Metadata that we need off-chain for various purposes, but should not go on the chain."],["Policy","A policy is (currently) revealed values of attributes that are part of the identity object. Policies are part of credentials."],["PreIdentityObject","Information sent from the account holder to the identity provider. This includes only the cryptographic parts, the attribute list is in a different object below. This is for the flow, where a initial account is to be created."],["PreIdentityObjectV1","Information sent from the account holder to the identity provider. This includes only the cryptographic parts, the attribute list is in a different object below. This is for the flow, where no initial account is involved."],["PreIdentityProof","Proof that the data sent to the identity provider is well-formed. The serialize instance is implemented manually in order to be backwards-compatible."],["PublicInformationForIp","This struct contains information from the account holder that the identity provider needs in order to create the initial credential for the account holder. It contains idCredPub, regId and the account keys. It is part of the preidentity object."],["SignatureThreshold","Threshold for the number of signatures required. The values of this type must maintain the property that they are not 0."],["SystemAttributeRandomness","Struct implementing `HasAttributeRandomness` using system randomness, to be parsed to the `create_credential` function from account_holder.rs."],["UnsignedCredentialDeploymentInfo","This is the CredentialDeploymentInfo structure, that instead of containing CredDeploymentProofs, it contains UnsignedCredDeploymentProofs, and the reg_id that also has to be signed."],["YearMonth","YearMonth in Gregorian calendar. The year is in Gregorian calendar and months are numbered from 1, i.e., 1 is January, …, 12 is December. Year must be a 4 digit year, i.e., between 1000 and 9999."]],"trait":[["Attribute","An abstraction of an attribute. In the id library internals the only thing we care about attributes is that they can be encoded as field elements. The meaning of attributes is then assigned at the outer layers when the library is used. In order to make the library as generic (and ultimately simple) as possible this trait is used."],["CredentialDataWithSigning","A helper trait to allow signing PublicInformationForIP in an implementation that does not give access to the secret keys."],["HasArPublicKey","A helper trait to access only the public key of the ArInfo structure. We use this to have functions work both on a map of public keys only, as well as on maps of ArInfos, see [crate::chain::verify_cdi]."],["HasAttributeRandomness",""],["HasAttributeValues",""],["HasIdentityObjectFields","Trait for extracting the relevants parts of an identity object needed for creating a credential"],["InitialAccountDataWithSigning","A helper trait to allow signing PublicInformationForIP in an implementation that does not give access to the secret keys."],["PublicCredentialData","A helper trait to access the public parts of the CredentialData structure. We use this to allow implementations that does not give or have access to the secret keys. NB: the threshold should be at most the number of keypairs."],["PublicInitialAccountData","A helper trait to access the public parts of the InitialAccountData structure. We use this to allow implementations that do not give or have access to the secret keys. NB: the threshold should be at most the number of keypairs."]],"type":[["ArPublicKey","Public key of an anonymity revoker."],["CredId","Type of credential registration IDs."],["IdCredPubVerifiers","A type alias for the combined proofs relating to the shared encryption of IdCredPub."]]});