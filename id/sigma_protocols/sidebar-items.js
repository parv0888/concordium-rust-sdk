initSidebarItems({"mod":[["aggregate_dlog","The module provides the implementation of the `aggregate_dlog` sigma protocol. This protocol enables one to prove knowledge of discrete logarithms $a_1 … a_n$ public values $ y = \\prod G_i^{a_i} $. This is a specialization of `com_eq` protocol where we do not require commitments."],["com_enc_eq","Implementation of the `com_enc_eq` sigma protocol. This protocol is used to prove that the encrypted value (encrypted via ElGamal) is the same as the value commited to via the Pedersen commitment."],["com_eq","The module provides the implementation of the `com_eq` sigma protocol. This protocol enables one to prove knowledge of discrete logarithm $a_1$ together with randomnesses $r_1$ corresponding to the public value $ y = \\prod G_i^{a_i} $ and commitment $C = commit(a_1, r_1)$. The product y and commitments can be in different groups, but they have to be of the same prime order, and for the implementation the field of scalars must be the same type for both groups."],["com_eq_different_groups","The module provides the implementation of the `com_eq_diff_groups` sigma protocol. This protocol enables one to prove that the value committed to in two commitments $C_1$ and $C_2$ in (potentially) two different groups (of the same order) is the same."],["com_eq_sig","This module implements the proof of knowledge of signature sigma protocol. This protocol allows a user to prove knowledge of a signature without revealing the original signature, or the message, but they have to reveal the blinded version of the signature, and commitments to the values that were signed."],["com_lin","This module implements the com-lin sigma protocol, which allows the prover to prove knowledge of pairs (s_i, r_i) and (s, r) such that \\sum_{i} u_i * s_i = u * s for some public constants u_i and u. The r’s are randomness in commitments to s_i’s and s’."],["com_mult","The module provides the implementation of the `com_mult` sigma protocol. This protocol enables one to prove that the the product of two commited values is equal to the third commited value, without revealing the values themselves."],["common",""],["dlog","This module provides the implementation of the discrete log sigma protocol which enables one to prove knowledge of the discrete logarithm without revealing it."]]});