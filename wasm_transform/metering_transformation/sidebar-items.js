initSidebarItems({"constant":[["FN_IDX_ACCOUNT_ENERGY","TODO set these indices to the imports of the respective accounting host functions. They should be given by the specification. The type of this function should be i64 -> ()"],["FN_IDX_MEMORY_ALLOC","Charge for memory allocation. The type of this function should be i32 -> i32."],["FN_IDX_TRACK_CALL","Dynamically track calls to enable us to limit the number of active frames. The type of this function should be unit to unit."],["FN_IDX_TRACK_RETURN","Track returns so that we can keep the count correctly. The type of this function should be () -> ()."],["NUM_ADDED_FUNCTIONS","The number of added functions. All functions that are in the source module will have the indices shifted by this amount. The table as well must be updated by increasing all the function indices by this constant."]],"fn":[["inject_accounting","Inject cost accounting into the function, according to cost specification version XXX."]],"mod":[["cost","Definition of energy costs of instructions."]],"trait":[["HasTransformationContext","A helper trait so that we can use the transformation on different datatypes. In particular we use it in tests which have their own notion of context to make it possible to specify modules in a compact way."]],"type":[["TransformationResult","Result of a transformation. The transformation should generally not fail on a well-formed module, i.e., one that has been validated. But we might want to put additional restrictions on a module, in which case we have the freedom to fail."]]});