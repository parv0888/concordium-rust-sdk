initSidebarItems({"enum":[["AccountStakingInfo",""],["AccountTransactionEffects","Effects of an account transactions. All variants apart from [AccountTransactionEffects::None] correspond to a unique transaction that was successful."],["Address","Either an address of an account, or contract."],["BakerEvent","Events that may result from the [TransactionType::ConfigureBaker] transaction."],["BlockItemSummaryDetails","Details of a block item summary, split by the kind of block item it is for."],["BlockSummary","Summary of transactions, protocol generated transfers, and chain parameters in a given block."],["ContractTraceElement","A successful contract invocation produces a sequence of effects on smart contracts and possibly accounts (if any contract transfers CCD to an account)."],["ConvertPartsPerHundredThousandsError","An error that may be raised by converting from a `Decimal` to a [`PartsPerHundredThousands`]."],["CredentialType","Enumeration of the types of credentials."],["DelegationEvent","Events that may happen as a result of the [TransactionType::ConfigureDelegation] transaction."],["DelegationTarget","Target of delegation."],["Level1Update","An update with level 1 keys of either level 1 or level 2 keys. Each of the updates must be a separate transaction."],["MakeEncryptedTransferError",""],["NodeConsensusStatus",""],["NodeDetails","Consensus related information for a node."],["OpenStatus","The status of whether a baking pool allows delegators to join."],["PoolPendingChange",""],["PoolStatus",""],["ProtocolVersion","An enumeration of the supported versions of the consensus protocol. Binary and JSON serializations are as Word64 corresponding to the protocol number."],["RejectReason","A reason for why a transaction was rejected. Rejected means included in a block, but the desired action was not achieved. The only effect of a rejected transaction is payment."],["RewardsOverview","Information about the state of the CCD distribution at a particular time."],["RootUpdate","An update with root keys of some other set of governance keys, or the root keys themselves. Each update is a separate transaction."],["SpecialTransactionOutcome","In addition to the user initiated transactions the protocol generates some events which are deemed “Special outcomes”. These are rewards for running the consensus and finalization protocols."],["StakePendingChange","Pending change in the baker’s stake."],["TransactionStatus","Status of a transaction known to the node."],["TransactionStatusInBlock","Status of a transaction in a given block. NB: If the transaction is committed or finalized, but not in the given block, then the API response will be `QueryError::NotFound`, hence those cases are not covered by this type."],["TransactionType","Types of account transactions."],["UpdatePayload","The type of an update payload."],["UpdateType","Enumeration of the types of updates that are possible."]],"mod":[["hashes","Different types of hashes based on SHA256."],["network","Network related types."],["queries","Types that appear in various queries of the node."],["smart_contracts","Types related to smart contracts."],["transactions","Definition of transactions and other transaction-like messages, together with their serialization, signing, and similar auxiliary methods."],["update","A module that provides helpers for constructing and signing update instructions."]],"struct":[["AbsoluteBlockHeight","Height of a block since chain genesis."],["AccessStructure","And access structure for performing chain updates. The access structure is only meaningful in the context of a list of update keys to which the indices refer to."],["AccountCreationDetails","Details of an account creation. These transactions are free, and we only ever get a response for them if the account is created, hence no failure cases."],["AccountEncryptedAmount","The state of the encrypted balance of an account."],["AccountIndex","Index of the account in the account table. These are assigned sequentially in the order of creation of accounts. The first account has index 0."],["AccountInfo","Account information exposed via the node’s API. This is always the state of an account in a specific block."],["AccountReleaseSchedule","State of the account’s release schedule. This is the balance of the account that is owned by the account, but cannot be used until the release point."],["AccountThreshold","The minimum number of credentials that need to sign any transaction coming from an associated account."],["AccountTransactionDetails","Details of an account transaction. This always has a sender and is paid for, and it might have some other effects on the state of the chain."],["AmountFraction","A fraction of an amount with a precision of `1/100_000`. The [`FromStr`] instance will parse a decimal fraction with up to `5` decimals."],["AuthorizationsV0","Access structures for each of the different possible chain updates, togehter with the context giving all the possible keys."],["AuthorizationsV1","Access structures for each of the different possible chain updates, togehter with the context giving all the possible keys."],["BakerAddedEvent",""],["BakerAggregationSignKey","A secret key used by bakers and finalizers to sign finalization records."],["BakerAggregationVerifyKey","Public key corresponding to [`BakerAggregationVerifyKey`]."],["BakerCredentials","Baker credentials type, which can be serialized to JSON and used by a concordium-node for baking."],["BakerElectionSignKey","A secret key used by a baker to prove that they won the lottery to produce a block."],["BakerElectionVerifyKey","A public key that corresponds to [`BakerElectionSignKey`]."],["BakerId","Internal short id of the baker."],["BakerInfo","Information about a baker."],["BakerKeyPairs","Baker keys containing both public and secret keys. This is used to construct `BakerKeysPayload` for adding and updating baker keys. It is also used to build the `BakerCredentials` required to have a concordium node running as a baker."],["BakerKeysEvent","Result of a successful change of baker keys."],["BakerParameters","Parameters related to becoming a baker that apply to protocol versions 1-3."],["BakerPoolInfo","Additional information about a baking pool. This information is added with the introduction of delegation in protocol version 4."],["BakerPoolStatus","The state of the baker currently registered on the account. Current here means “present”. This is the information that is being updated by transactions (and rewards). This is in contrast to “epoch baker” which is the state of the baker that is currently eligible for baking."],["BakerSignatureSignKey","A secret key used by a baker to sign blocks."],["BakerSignatureVerifyKey","A public key that corresponds to [`BakerSignatureVerifyKey`]."],["BakerStakeUpdatedData","Data contained in the transaction response in case a baker stake was updated (either increased or decreased.)"],["BirkBaker","State of an individual baker."],["BirkParameters","The state of consensus parameters, and allowed participants (i.e., bakers)."],["BlockHeight","Height of a block. Last genesis block is at height 0, a child of a block at height n is at height n+1. This height counts from the last protocol update."],["BlockItemSummary","Summary of the outcome of a block item in structured form. The summary determines which transaction type it was."],["BlockSummaryData",""],["CapitalBound","A bound on the relative share of the total staked capital that a baker can have as its stake. This is required to be greater than 0."],["ChainParameterVersion0",""],["ChainParameterVersion1",""],["ChainParametersV0","Values of chain parameters that can be updated via chain updates."],["ChainParametersV1","Values of chain parameters that can be updated via chain updates."],["CommissionRanges","Ranges of allowed commission values that pools may choose from."],["CommissionRates",""],["CommonRewardData","Reward data common to both V0 and V1 rewards."],["ContractAddress","Address of a contract."],["ContractInitializedEvent",""],["CooldownParameters",""],["CredentialRegistrationID","A registration ID of a credential. This ID is generated from the user’s PRF key and a sequential counter. [`CredentialRegistrationID`]’s generated from the same PRF key, but different counter values cannot easily be linked together."],["CredentialsPerBlockLimit","Limit on the number of credential deployments in a block. Since credential deployments create accounts, this is in effect a limit on the number of accounts that can be created in a block."],["CurrentPaydayBakerPoolStatus",""],["DelegatorId","Internal short id of the delegator."],["DelegatorInfo","Information about a registered passive or pool delegator."],["DelegatorRewardPeriodInfo","Information about a passive or pool delegator fixed in a reward period."],["DurationSeconds","Duration in seconds."],["ElectionDifficulty","Representation of the election difficulty as parts per `100_000`. The election difficulty is never more than `1`."],["EncryptedAmountDecryptionContext","Context that speeds up decryption of encrypted amounts."],["EncryptedAmountRemovedEvent","Event generated when one or more encrypted amounts are consumed from the account."],["EncryptedSelfAmountAddedEvent",""],["Energy","Energy measure."],["Epoch","Epoch number"],["ExchangeRate","An exchange rate between two quantities. This is never 0, and the exchange rate should also never be infinite."],["FinalizationIndex","Sequential index of finalization."],["FinalizationSummary","Summary of the finalization record in a block, if any."],["FinalizationSummaryParty","Details of a party in a finalization."],["GASRewards","The reward fractions related to the gas account and inclusion of special transactions."],["GenesisIndex","Type indicating the index of a (re)genesis block. The initial genesis block has index `0` and each subsequent regenesis has an incrementally higher index."],["HigherLevelAccessStructure","Either root, level1, or level 2 access structure. They all have the same structure, keys and a threshold. The phantom type parameter is used for added type safety to distinguish different access structures in different contexts."],["InclusiveRange",""],["InstanceUpdatedEvent","Data generated as part of updating a single contract instance. In general a single Update transaction will generate one or more of these events, together with possibly some transfers."],["LeverageFactor","The amount of leverage that a baker can get from delegation. A leverage factor of 1 means that a baker does not gain anything from delegation."],["Memo","A data that was registered on the chain."],["MintDistributionV0","Mint distribution that applies to protocol versions 1-3."],["MintDistributionV1","Mint distribution parameters that apply to protocol version 4 and up."],["MintRate","Rate of creation of new CCDs. For example, A value of `0.05` would mean an increase of 5 percent per unit of time. This value does not specify the time unit, and this differs based on the protocol version."],["NetworkInfo","The network information of a node."],["NewEncryptedAmountEvent","Event generated when an account receives a new encrypted amount."],["NodeInfo","The status of the requested node."],["Nonce","A sequence number ordering transactions from a specific account. The initial sequence number is `1`, and a transaction with sequence number `m` must be followed by a transaction with sequence number `m+1`."],["PartsPerHundredThousands","A fraction between 0 and 1 with a precision of 1/100_000. The `Into<u32>` implementation returns the number of parts per `100_000`."],["PassiveDelegationStatus","State of the passive delegation pool at present. Changes to delegation, e.g., an account deciding to delegate are reflected in this structure at first."],["PeerStatsResponse","A response containing information about a peer."],["PendingUpdatesV0",""],["PendingUpdatesV1",""],["PoolParameters","Parameters related to staking pools. This applies to protocol version 4 and up."],["ProtocolUpdate","A generic protocol update. This is essentially an announcement of the update. The details of the update will be communicated in some off-chain way, and bakers will need to update their node software to support the update."],["RegisteredData","A data that was registered on the chain."],["Release","An individual release of a locked balance."],["RewardParametersSkeleton","Values of reward parameters."],["RewardPeriodLength","Length of a reward period in epochs. Must always be a strictly positive integer."],["ScheduledUpdate","A scheduled update of a given type."],["Slot","Slot number"],["SlotDuration","Duration of a slot in milliseconds."],["TimeParameters","The time parameters are introduced as of protocol version 4, and consist of the reward period length and the mint rate per payday. These are coupled as a change to either affects the overall rate of minting."],["TransactionFeeDistribution","Update the transaction fee distribution to the specified value."],["TransactionIndex","Position of the transaction in a block."],["UnknownProtocolVersion","A structure to represent conversion errors when converting integers to protocol versions."],["UpdateDetails","Details of an update instruction. These are free, and we only ever get a response for them if the update is successfully enqueued, hence no failure cases."],["UpdateHeader","A header common to all update instructions."],["UpdateInstruction",""],["UpdateInstructionSignature","Signature of an update instruction."],["UpdateKeyPair","A ed25519 keypair. This is available in the `ed25519::dalek` crate, but the JSON serialization there is not compatible with what we use, so we redefine it there."],["UpdateKeysCollectionSkeleton","The current collection of keys allowed to do updates. Parametrized by the chain parameter version."],["UpdateKeysIndex","An identifier of a key that can sign update instructions. A signature of an update instruction is a collection of signatures. An [`UpdateKeysIndex`] identifies keys that correspond to the signatures."],["UpdateKeysThreshold","A lower bound on the number of signatures needed to sign a valid update message of a particular type. This is never 0."],["UpdatePublicKey","A single public key that can sign updates."],["UpdateQueue","A queue of updates of a given type."],["UpdateSequenceNumber","Equivalent of a transaction nonce but for update instructions. Update sequence numbers are per update type."],["UpdatesSkeleton","State of updates. This includes current values of parameters as well as any scheduled updates."],["UrlText","A unicode representation of a Url. The Utf8 encoding of the Url must be at most `MAX_URL_TEXT_LENGTH` bytes."],["ZeroSignatureThreshold","An error type that indicates that a 0 attempted to be used as a signature threshold."]],"trait":[["AuthorizationsFamily","Together with [`Authorizations`] this defines a type family allowing us to map [`ChainParameterVersion0`] and [`ChainParameterVersion1`] to the corresponding `Authorizations` version."],["ChainParametersFamily",""],["MintDistributionFamily",""],["PendingUpdatesFamily",""],["UpdateSigner","Implementors of this trait can sign update instructions."]],"type":[["AggregateSigPairing",""],["Authorizations","A mapping of chain parameter versions to authorization versions."],["ChainParameters",""],["ContractIndex","Contract address index. A contract address consists of an index and a subindex. This type is for the index."],["ContractSubIndex","Contract address subindex. A contract address consists of an index and a subindex. This type is for the subindex."],["CryptographicParameters","Cryptographic context for the chain. These parameters are used to support zero-knowledge proofs."],["MintDistribution",""],["PendingUpdates",""],["RewardParameters",""],["UpdateKeysCollection",""],["Updates","State of updates. This includes current values of parameters as well as any scheduled updates."]]});