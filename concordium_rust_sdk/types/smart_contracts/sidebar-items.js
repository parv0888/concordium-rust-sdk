initSidebarItems({"constant":[["DEFAULT_INVOKE_ENERGY",""],["MAX_ALLOWED_INVOKE_ENERGY","The highest amount of energy allowed when invoking a smart contract endpoint with a concordium node."]],"enum":[["InstanceInfo","Information about an existing smart contract instance."],["InvokeContractResult",""],["WasmVersion","Version of the module. This determines the chain API that the module can access."]],"mod":[["concordium_contracts_common","This library provides the core API that can be used to write smart contracts for the Concordium blockchain in the Rust programming language. It aims to provide safe wrappers around the core primitives exposed by the chain and accessible to smart contracts."]],"struct":[["ContractContext","Data needed to invoke the contract."],["ContractEvent","An event logged by a smart contract initialization."],["ContractName","A contract name. Expected format: “init_<contract_name>”."],["ContractName","Re-export of common helper functionality for smart contract, such as types and serialization specific for smart contracts."],["ExceedsParameterSize",""],["ModuleSource","Unparsed Wasm module source."],["OwnedContractName","A contract name (owned version). Expected format: “init_<contract_name>”."],["OwnedContractName","Re-export of common helper functionality for smart contract, such as types and serialization specific for smart contracts."],["OwnedReceiveName","A receive name (owned version). Expected format: “<contract_name>.<func_name>”. Most methods are available only on the [`ReceiveName`] type, the intention is to access those via the `as_receive_name` method."],["OwnedReceiveName","Re-export of common helper functionality for smart contract, such as types and serialization specific for smart contracts."],["Parameter","A smart contract parameter. The [Default] implementation produces an empty parameter."],["ReceiveName","A receive name. Expected format: “<contract_name>.<func_name>”."],["ReceiveName","Re-export of common helper functionality for smart contract, such as types and serialization specific for smart contracts."],["ReturnValue",""],["WasmModule","Unparsed module with a version indicating what operations are allowed."]],"type":[["ModuleRef","Reference to a deployed Wasm module on the chain. This reference is used when creating new instances."]]});