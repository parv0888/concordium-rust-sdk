initSidebarItems({"constant":[["TRANSACTION_HEADER_SIZE","Size of a transaction header. This is currently always 60 bytes. Future chain updates might revise this, but this is a big change so this is expected to change seldomly."]],"enum":[["GivenEnergy","An upper bound on the amount of energy to spend on a transaction. Transaction costs have two components, one is based on the size of the transaction and the number of signatures, and then there is a transaction specific one. This construction helps handle the fixed costs and allows the user to focus only on the transaction specific ones. The most important case for this are smart contract initialisations and updates."]],"fn":[["configure_baker","Configure the account as a baker. Only valid for protocol version 4 and up."],["configure_delegation","Configure the account as a delegator. Only valid for protocol version 4 and up."],["deploy_module","Deploy the given Wasm module. The module is given as a binary source, and no processing is done to the module."],["encrypted_transfer","Make an encrypted transfer. The payload can be constructed using [encrypted_transfers::make_transfer_data]."],["encrypted_transfer_with_memo","Make an encrypted transfer with a memo. The payload can be constructed using [encrypted_transfers::make_transfer_data]."],["init_contract","Initialize a smart contract, giving it the given amount of energy for execution. The unique parameters are"],["make_transaction","A convenience wrapper around `sign_transaction` that construct the transaction and signs it. Compared to transaction-type-specific wrappers above this allows selecting the amount of energy"],["register_data","Construct a transction to register the given piece of data."],["transfer","Construct a transfer transaction."],["transfer_to_encrypted","Transfer the given amount from public to encrypted balance of the given account."],["transfer_to_public","Transfer the given amount from encrypted to public balance of the given account. The payload may be constructed using [encrypted_transfers::make_sec_to_pub_transfer_data]"],["transfer_with_memo","Construct a transfer transaction with a memo."],["transfer_with_schedule","Construct a transfer with schedule transaction, sending to the given account."],["transfer_with_schedule_and_memo","Construct a transfer with schedule and memo transaction, sending to the given account."],["update_contract","Update a smart contract intance, giving it the given amount of energy for execution. The unique parameters are"],["update_credential_keys","Construct a transaction to update keys of a single credential on an account. The transaction specific arguments are"],["update_credentials","Construct a transaction to update credentials on an account. The transaction specific arguments are"]],"struct":[["PreAccountTransaction","A transaction that is prepared to be signed. The serde instance serializes the structured payload and skips serializing the encoded one."]]});