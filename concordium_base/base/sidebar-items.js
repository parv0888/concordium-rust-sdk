initSidebarItems({"enum":[["Address","Either an address of an account, or contract."],["ConvertPartsPerHundredThousandsError","An error that may be raised by converting from a `Decimal` to a [`PartsPerHundredThousands`]."],["DelegationTarget","Target of delegation."],["OpenStatus","The status of whether a baking pool allows delegators to join."],["ProtocolVersion","An enumeration of the supported versions of the consensus protocol. Binary and JSON serializations are as Word64 corresponding to the protocol number."]],"struct":[["AbsoluteBlockHeight","Height of a block since chain genesis."],["AccountIndex","Index of the account in the account table. These are assigned sequentially in the order of creation of accounts. The first account has index 0."],["AccountThreshold","The minimum number of credentials that need to sign any transaction coming from an associated account."],["AmountFraction","A fraction of an amount with a precision of `1/100_000`. The [`FromStr`] instance will parse a decimal fraction with up to `5` decimals."],["BakerAggregationSignKey","A secret key used by bakers and finalizers to sign finalization records."],["BakerAggregationVerifyKey","Public key corresponding to [`BakerAggregationVerifyKey`]."],["BakerCredentials","Baker credentials type, which can be serialized to JSON and used by a concordium-node for baking."],["BakerElectionSignKey","A secret key used by a baker to prove that they won the lottery to produce a block."],["BakerElectionVerifyKey","A public key that corresponds to [`BakerElectionSignKey`]."],["BakerId","Internal short id of the baker."],["BakerKeyPairs","Baker keys containing both public and secret keys. This is used to construct `BakerKeysPayload` for adding and updating baker keys. It is also used to build the `BakerCredentials` required to have a concordium node running as a baker."],["BakerPoolInfo","Additional information about a baking pool. This information is added with the introduction of delegation in protocol version 4."],["BakerSignatureSignKey","A secret key used by a baker to sign blocks."],["BakerSignatureVerifyKey","A public key that corresponds to [`BakerSignatureVerifyKey`]."],["BlockHeight","Height of a block. Last genesis block is at height 0, a child of a block at height n is at height n+1. This height counts from the last protocol update."],["CapitalBound","A bound on the relative share of the total staked capital that a baker can have as its stake. This is required to be greater than 0."],["ChainParameterVersion0",""],["ChainParameterVersion1",""],["CommissionRanges","Ranges of allowed commission values that pools may choose from."],["CommissionRates",""],["ContractAddress","Address of a contract."],["CredentialRegistrationID","A registration ID of a credential. This ID is generated from the user’s PRF key and a sequential counter. [`CredentialRegistrationID`]’s generated from the same PRF key, but different counter values cannot easily be linked together."],["CredentialsPerBlockLimit","Limit on the number of credential deployments in a block. Since credential deployments create accounts, this is in effect a limit on the number of accounts that can be created in a block."],["DelegatorId","Internal short id of the delegator."],["DurationSeconds","Duration in seconds."],["ElectionDifficulty","Representation of the election difficulty as parts per `100_000`. The election difficulty is never more than `1`."],["Energy","Energy measure."],["Epoch","Epoch number"],["ExchangeRate","An exchange rate between two quantities. This is never 0, and the exchange rate should also never be infinite."],["FinalizationIndex","Sequential index of finalization."],["GenesisIndex","Type indicating the index of a (re)genesis block. The initial genesis block has index `0` and each subsequent regenesis has an incrementally higher index."],["InclusiveRange",""],["LeverageFactor","The amount of leverage that a baker can get from delegation. A leverage factor of 1 means that a baker does not gain anything from delegation."],["MintDistributionV0","Mint distribution that applies to protocol versions 1-3."],["MintDistributionV1","Mint distribution parameters that apply to protocol version 4 and up."],["MintRate","Rate of creation of new CCDs. For example, A value of `0.05` would mean an increase of 5 percent per unit of time. This value does not specify the time unit, and this differs based on the protocol version."],["Nonce","A sequence number ordering transactions from a specific account. The initial sequence number is `1`, and a transaction with sequence number `m` must be followed by a transaction with sequence number `m+1`."],["PartsPerHundredThousands","A fraction between 0 and 1 with a precision of 1/100_000. The `Into<u32>` implementation returns the number of parts per `100_000`."],["Slot","Slot number"],["SlotDuration","Duration of a slot in milliseconds."],["TransactionIndex","Position of the transaction in a block."],["UnknownProtocolVersion","A structure to represent conversion errors when converting integers to protocol versions."],["UpdateKeyPair","A ed25519 keypair. This is available in the `ed25519::dalek` crate, but the JSON serialization there is not compatible with what we use, so we redefine it there."],["UpdateKeysIndex","An identifier of a key that can sign update instructions. A signature of an update instruction is a collection of signatures. An [`UpdateKeysIndex`] identifies keys that correspond to the signatures."],["UpdateKeysThreshold","A lower bound on the number of signatures needed to sign a valid update message of a particular type. This is never 0."],["UpdatePublicKey","A single public key that can sign updates."],["UpdateSequenceNumber","Equivalent of a transaction nonce but for update instructions. Update sequence numbers are per update type."],["UrlText","A unicode representation of a Url. The Utf8 encoding of the Url must be at most `MAX_URL_TEXT_LENGTH` bytes."],["ZeroSignatureThreshold","An error type that indicates that a 0 attempted to be used as a signature threshold."]],"trait":[["MintDistributionFamily",""]],"type":[["AggregateSigPairing",""],["ContractIndex","Contract address index. A contract address consists of an index and a subindex. This type is for the index."],["ContractSubIndex","Contract address subindex. A contract address consists of an index and a subindex. This type is for the subindex."],["MintDistribution",""]]});