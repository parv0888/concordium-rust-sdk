initSidebarItems({"enum":[["AddBakerKeysMarker","Marker for `BakerKeysPayload` indicating the proofs contained in `BakerKeysPayload` have been generated for an `AddBaker` transaction."],["BlockItem","A block item are data items that are transmitted on the network either as separate messages, or as part of blocks. They are the only user-generated (as opposed to protocol-generated) message."],["ConfigureBakerKeysMarker","Marker for `ConfigureBakerKeysPayload` indicating the proofs contained in `ConfigureBaker` have been generated for an `ConfigureBaker` transaction."],["Payload","Payload of an account transaction."],["TransactionType","Types of account transactions."],["UpdateBakerKeysMarker","Marker for `BakerKeysPayload` indicating the proofs contained in `BakerKeysPayload` have been generated for an `UpdateBakerKeys` transaction."]],"fn":[["compute_transaction_sign_hash","Compute the transaction sign hash from an encoded payload and header."],["get_encoded_payload","Parse an encoded payload of specified length."],["sign_transaction","Sign the header and payload, construct the transaction, and return it."],["verify_signature_transaction_sign_hash","Verify a signature on the transaction sign hash. This is a low-level operation that is useful to avoid recomputing the transaction hash."]],"mod":[["construct","High level wrappers for making transactions with minimal user input. These wrappers handle encoding, setting energy costs when those are fixed for transaction. See also the [send] module above which combines construction with signing."],["cost","Energy costs of transactions."],["send","High level wrappers for making transactions with minimal user input. These wrappers handle encoding, setting energy costs when those are fixed for transaction."]],"struct":[["AccountAccessStructure","The most straighforward account access structure is a map of public keys with the account threshold."],["AccountTransaction","An account transaction signed and paid for by a sender account. The payload type is a generic parameter to support two kinds of payloads, a fully deserialized [Payload] type, and an [EncodedPayload]. The latter is useful since deserialization of some types of payloads is expensive. It is thus useful to delay deserialization until after we have checked signatures and the sender account information."],["AddBakerPayload","Payload of the `AddBaker` transaction. This transaction registers the account as a baker."],["BakerKeysPayload","Auxiliary type that contains public keys and proof of ownership of those keys. This is used in the `AddBaker` and `UpdateBakerKeys` transaction types. The proofs are either constructed for `AddBaker` or `UpdateBakerKeys` and the generic `V` is used as a marker to distinguish this in the type. See the markers: `AddBakerKeysMarker` and `UpdateBakerKeysMarker`."],["ConfigureBakerPayload","Payload for configuring a baker. The different constructors cover the different common cases. The [Default] implementation produces an empty configure that will have no effects."],["ConfigureDelegationPayload","Payload for configuring delegation. The [Default] implementation produces an empty configuration that will not change anything."],["EncodedPayload","An account transaction payload that has not yet been deserialized. This is a simple wrapper around Vec with bespoke serialization."],["ExceedsPayloadSize",""],["InitContractPayload","Data needed to initialize a smart contract."],["Memo","A data that was registered on the chain."],["PayloadSize","Type safe wrapper to record the size of the transaction payload."],["RegisteredData","A data that was registered on the chain."],["TooBig","An error used to signal that an object was too big to be converted."],["TooLargeError","Registered data is too large."],["TransactionHeader","Header of an account transaction that contains basic data to check whether the sender and the transaction is valid."],["TransactionTypeConversionError","An error that occurs when trying to convert an invalid i32 tag to a [TransactionType]."],["UpdateContractPayload","Data needed to update a smart contract instance."]],"trait":[["ExactSizeTransactionSigner","A signing implementation that knows the number of keys up-front."],["HasAccountAccessStructure","Implementations of this trait are structures which can produce public keys with which transaction signatures can be verified."],["PayloadLike","A helper trait so that we can treat payload and encoded payload in the same place."],["TransactionSigner","Abstraction of private keys."]],"type":[["BakerAddKeysPayload","Baker keys payload containing proofs construct for a `AddBaker` transaction."],["BakerUpdateKeysPayload","Baker keys payload containing proofs construct for a `UpdateBakerKeys` transaction."],["ConfigureBakerKeysPayload","Baker keys payload containing proofs construct for a `ConfigureBaker` transaction."]]});